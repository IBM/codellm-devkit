#    Makefile template for Configure for the BFD library.
#    Copyright (C) 1990, 91, 92, 93, 94, 95, 1996
#    Free Software Foundation, Inc.
#    Written by Cygnus Support.
# 
# This file is part of BFD, the Binary File Descriptor library.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

VPATH = @srcdir@
srcdir = @srcdir@

prefix = @prefix@

program_transform_name = @program_transform_name@
exec_prefix = @exec_prefix@
bindir = @bindir@
libdir = @libdir@

datadir = @datadir@
mandir = @mandir@
man1dir = $(mandir)/man1
man2dir = $(mandir)/man2
man3dir = $(mandir)/man3
man4dir = $(mandir)/man4
man5dir = $(mandir)/man5
man6dir = $(mandir)/man6
man7dir = $(mandir)/man7
man8dir = $(mandir)/man8
man9dir = $(mandir)/man9
infodir = @infodir@
includedir = @includedir@
oldincludedir =
docdir = doc

SHELL = /bin/sh

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

AR = @AR@
AR_FLAGS = rc
CC = @CC@
CFLAGS = @CFLAGS@
MAKEINFO = makeinfo
RANLIB = @RANLIB@

ALLLIBS = @ALLLIBS@

PICFLAG = @PICFLAG@
SHLIB = @SHLIB@
SHLIB_CC = @SHLIB_CC@
SHLIB_CFLAGS = @SHLIB_CFLAGS@
COMMON_SHLIB = @COMMON_SHLIB@
SHLINK = @SHLINK@

SONAME = lib`echo $(SHLIB) | sed -e 's/^lib//' | sed '$(program_transform_name)'`

CC_FOR_BUILD = @CC_FOR_BUILD@

INCDIR = $(srcdir)/../include
CSEARCH = -I. -I$(srcdir) -I$(INCDIR)
DEP = mkdep

SUBDIRS = doc

TARGETLIB = libbfd.a

# bfd.h goes here, for now
BFD_H = bfd.h

# Some of these files should be in BFD*_BACKENDS below, but some programs
# won't link without them.  So, in order for some of the minimal-bfd
# hacks to work, they're also included here for now.
#	gdb: elf.o
#	objdump: elf.o
#
# Also, Jim Kingdon notes:
# Writing S-records should be included in all (or at least most)
# *-*-coff, *-*-aout, etc., configurations, because people will want to
# be able to use objcopy to create S-records.  (S-records are not useful
# for the debugger, so if you are downloading things as S-records you
# need two copies of the executable, one to download and one for the
# debugger).
BFD_LIBS = \
	archive.o archures.o bfd.o cache.o coffgen.o corefile.o \
	format.o init.o libbfd.o opncls.o reloc.o \
	section.o syms.o targets.o hash.o linker.o \
	elf.o srec.o binary.o tekhex.o ihex.o stabs.o stab-syms.o

BFD_LIBS_CFILES = \
	archive.c archures.c bfd.c cache.c coffgen.c corefile.c \
	format.c init.c libbfd.c opncls.c reloc.c \
	section.c syms.c targets.c hash.c linker.c \
	elf.c srec.c binary.c tekhex.c ihex.c stabs.c stab-syms.c

# This list is alphabetized to make it easier to keep in sync
# with the decls and initializer in archures.c.
ALL_MACHINES = \
	cpu-a29k.o \
	cpu-alpha.o \
	cpu-arm.o \
	cpu-h8300.o \
	cpu-h8500.o \
	cpu-hppa.o \
	cpu-i386.o \
	cpu-i860.o \
	cpu-i960.o \
	cpu-m68k.o \
	cpu-m88k.o \
	cpu-mips.o \
	cpu-ns32k.o \
	cpu-powerpc.o \
	cpu-rs6000.o \
	cpu-sh.o \
	cpu-sparc.o \
	cpu-vax.o \
	cpu-we32k.o \
	cpu-w65.o \
	cpu-z8k.o

ALL_MACHINES_CFILES = \
	cpu-a29k.c \
	cpu-alpha.c \
	cpu-arm.c \
	cpu-h8300.c \
	cpu-h8500.c \
	cpu-hppa.c \
	cpu-i386.c \
	cpu-i860.c \
	cpu-i960.c \
	cpu-m68k.c \
	cpu-m88k.c \
	cpu-mips.c \
	cpu-ns32k.c \
	cpu-powerpc.c \
	cpu-rs6000.c \
	cpu-sh.c \
	cpu-sparc.c \
	cpu-vax.c \
	cpu-we32k.c \
	cpu-w65.c \
	cpu-z8k.c

# The .o files needed by all of the 32 bit vectors that are configured into
# target_vector in targets.c if configured with --enable-targets=all.
BFD32_BACKENDS = \
	aout-adobe.o \
	aout-ns32k.o \
	aout0.o \
	aout32.o \
	bout.o \
	cf-i386lynx.o \
	cf-m68klynx.o \
	cf-sparclynx.o \
	coff-a29k.o \
	coff-apollo.o \
	coff-arm.o \
	coff-aux.o \
	coff-h8300.o \
	coff-h8500.o \
	coff-i386.o \
	coff-go32.o \
	coff-i860.o \
	coff-i960.o \
	coff-m68k.o \
	coff-m88k.o \
	coff-mips.o \
	coff-pmac.o \
	coff-rs6000.o \
	coff-sh.o \
	coff-sparc.o \
	coff-u68k.o \
	coff-we32k.o \
	coff-w65.o \
	coff-z8k.o \
	cofflink.o \
	ecoff.o \
	ecofflink.o \
	elf32-gen.o \
	elf32-hppa.o \
	elf32-i386.o \
	elf32-i860.o \
	elf32-m68k.o \
	elf32-m88k.o \
	elf32-mips.o \
	elf32-ppc.o \
	elf32-sparc.o \
	elf32.o \
	elflink.o \
	hp300hpux.o \
	som.o \
	i386aout.o \
	i386bsd.o \
	i386freebsd.o \
	i386linux.o \
	i386lynx.o \
	i386msdos.o \
	i386netbsd.o \
	i386mach3.o \
	i386os9k.o \
	ieee.o \
	m68klinux.o \
	m68klynx.o \
	m68knetbsd.o \
	m88kmach3.o \
	mipsbsd.o \
	newsos3.o \
	nlm.o \
	nlm32-i386.o \
	nlm32-sparc.o \
	nlm32-ppc.o \
	nlm32.o \
	ns32knetbsd.o \
	oasys.o \
	pc532-mach.o \
	pe-arm.o \
	pei-arm.o \
	pe-i386.o \
	pei-i386.o \
	pe-ppc.o \
	pei-ppc.o \
	ppcboot.o \
	reloc16.o \
	sparclynx.o \
	sparcnetbsd.o \
	sunos.o \
	tekhex.o \
	versados.o \
	xcofflink.o

BFD32_BACKENDS_CFILES = \
	aout-adobe.c \
	aout-ns32k.c \
	aout0.c \
	aout32.c \
	bout.c \
	cf-i386lynx.c \
	cf-m68klynx.c \
	cf-sparclynx.c \
	coff-a29k.c \
	coff-apollo.c \
	coff-arm.c \
	coff-aux.c \
	coff-h8300.c \
	coff-h8500.c \
	coff-i386.c \
	coff-i860.c \
	coff-go32.c \
	coff-i960.c \
	coff-m68k.c \
	coff-m88k.c \
	coff-mips.c \
	coff-pmac.c \
	coff-rs6000.c \
	coff-sh.c \
	coff-sparc.c \
	coff-u68k.c \
	coff-we32k.c \
	coff-w65.c \
	coff-z8k.c \
	cofflink.c \
	ecoff.c \
	ecofflink.c \
	elf32-gen.c \
	elf32-hppa.c \
	elf32-i386.c \
	elf32-i860.c \
	elf32-m68k.c \
	elf32-m88k.c \
	elf32-mips.c \
	elf32-ppc.c \
	elf32-sparc.c \
	elf32.c \
	elflink.c \
	hp300hpux.c \
	som.c \
	i386aout.c \
	i386bsd.c \
	i386freebsd.c \
	i386linux.c \
	i386lynx.c \
	i386msdos.c \
	i386netbsd.c \
	i386mach3.c \
	i386os9k.c \
	ieee.c \
	m68klinux.c \
	m68klynx.c \
	m68knetbsd.c \
	m88kmach3.c \
	mipsbsd.c \
	newsos3.c \
	nlm.c \
	nlm32-i386.c \
	nlm32-sparc.c \
	nlm32-ppc.c \
	nlm32.c \
	ns32knetbsd.c \
	oasys.c \
	pc532-mach.c \
	pe-arm.c \
	pei-arm.c \
	pe-i386.c \
	pei-i386.c \
	pe-ppc.c \
	pei-ppc.c \
	ppcboot.c \
	reloc16.c \
	sparclynx.c \
	sparcnetbsd.c \
	sunos.c \
	tekhex.c \
	versados.c \
	xcofflink.c

# The .o files needed by all of the 64 bit vectors that are configured into
# target_vector in targets.c if configured with --enable-targets=all
# and --enable-64-bit-bfd.
BFD64_BACKENDS = \
	aout64.o \
	coff-alpha.o \
	demo64.o \
	elf64-alpha.o \
	elf64-gen.o \
	elf64-mips.o \
	elf64-sparc.o \
	elf64.o \
	evax-alpha.o \
	evax-egsd.o \
	evax-etir.o \
	evax-emh.o \
	evax-misc.o \
	nlm32-alpha.o \
	nlm64.o

BFD64_BACKENDS_CFILES = \
	aout64.c \
	coff-alpha.c \
	demo64.c \
	elf64-alpha.c \
	elf64-gen.c \
	elf64-mips.c \
	elf64-sparc.c \
	elf64.c \
	evax-alpha.c \
	evax-egsd.c \
	evax-etir.c \
	evax-emh.c \
	evax-misc.c \
	nlm32-alpha.c \
	nlm64.c

OPTIONAL_BACKENDS = \
	aix386-core.o \
	hpux-core.o \
	irix-core.o \
	lynx-core.o \
	osf-core.o \
	trad-core.o \
	cisco-core.o

OPTIONAL_BACKENDS_CFILES = \
	aix386-core.c \
	hpux-core.c \
	irix-core.c \
	lynx-core.c \
	osf-core.c \
	trad-core.c \
	cisco-core.c

# These are defined by configure.in:
WORDSIZE = @wordsize@
ALL_BACKENDS = @all_backends@
BFD_BACKENDS = @bfd_backends@
BFD_MACHINES = @bfd_machines@
TDEFAULTS = @tdefaults@

all:

FLAGS_TO_PASS = \
	"prefix=$(prefix)" \
	"exec_prefix=$(exec_prefix)" \
	"against=$(against)" \
	"AR=$(AR)" \
	"AR_FLAGS=$(AR_FLAGS)" \
	"CC=$(CC)" \
	"CC_FOR_BUILD=$(CC_FOR_BUILD)" \
	"CFLAGS=$(CFLAGS)" \
	"RANLIB=$(RANLIB)" \
	"MAKEINFO=$(MAKEINFO)" \
	"INSTALL=$(INSTALL)" \
	"INSTALL_DATA=$(INSTALL_DATA)" \
	"INSTALL_PROGRAM=$(INSTALL_PROGRAM)"

ALL_CFLAGS=@HDEFINES@ @COREFLAG@ @TDEFINES@ $(CSEARCH) $(CSWITCHES) $(CFLAGS)
.c.o:
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC) -c $(PICFLAG) $(ALL_CFLAGS) $< -o pic/$@; \
	else true; fi
	$(CC) -c $(ALL_CFLAGS) $<

bfd_libs_here =
all_machines_here =
bfd32_backends_here =
core_files_here =
configs_not_included_in_all_targets_option_here =

# C source files that correspond to .o's.
CFILES = \
	$(BFD_LIBS_CFILES) \
	$(ALL_MACHINES_CFILES) \
	$(BFD32_BACKENDS_CFILES) \
	$(BFD64_BACKENDS_CFILES) \
	$(OPTIONAL_BACKENDS_CFILES) \
	i386dynix.c hp300bsd.c

HFILES = aout-target.h aoutf1.h aoutx.h coffcode.h \
	 coffswap.h ecoffswap.h elf32-hppa.h elf32-target.h elf64-target.h \
	 elfcode.h evax.h hppa_stubs.h libaout.h libbfd.h \
	 libcoff.h libecoff.h elf-bfd.h libhppa.h libieee.h libnlm.h \
	 liboasys.h nlm-target.h nlmcode.h som.h genlink.h netbsd.h ns32k.h

all: Makefile $(ALLLIBS) @PICLIST@
	@$(MAKE) subdir_do DO=all "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)

.NOEXPORT:
MAKEOVERRIDES=

.PHONY: check installcheck
check:
	@echo No testsuites exist for the BFD library. Nothing to check.

installcheck:
	@echo No testsuites exist for the BFD library. Nothing to check.

info dvi : force
	@$(MAKE) subdir_do DO=$@ "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)

clean-info:
	@$(MAKE) subdir_do DO=clean-info "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)

install-info: force
	@$(MAKE) subdir_do DO=install-info "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)

diststuff: info

# Various kinds of .o files to put in libbfd.a:
# BFD_LIBS	Generic routines, always needed.
# BFD_BACKENDS	Routines the configured targets need.
# BFD_MACHINES	Architecture-specific routines the configured targets need.
# COREFILE	Core file routines for a native configuration
OFILES = $(BFD_LIBS) $(BFD_BACKENDS) $(BFD_MACHINES) @COREFILE@

stamp-ofiles: Makefile
	rm -f tofiles
	f=""; \
	for i in $(OFILES) ; do \
	  case " $$f " in \
	    *" $$i "*) ;; \
	    *) f="$$f $$i" ;; \
	  esac ; \
	done ; \
	echo $$f > tofiles
	$(srcdir)/../move-if-change tofiles ofiles
	touch stamp-ofiles

ofiles: stamp-ofiles ; @true

$(TARGETLIB): $(OFILES) ofiles
	rm -f $(TARGETLIB)
	@echo ofiles = `cat ofiles`
	$(AR) $(AR_FLAGS) $(TARGETLIB) `cat ofiles`
	$(RANLIB) $(TARGETLIB)

stamp-piclist: ofiles
	rm -f tpiclist
	if [ -n "$(PICFLAG)" ]; then \
	  sed -e 's,\([^ ][^ ]*\),pic/\1,g' ofiles > tpiclist; \
	else \
	  cp ofiles tpiclist; \
	fi
	$(srcdir)/../move-if-change tpiclist piclist
	touch stamp-piclist

piclist: stamp-piclist ; @true

$(SHLIB): stamp-picdir $(OFILES) piclist
	rm -f $(SHLIB)
	$(SHLIB_CC) $(SHLIB_CFLAGS) -o $(SHLIB) `cat piclist`

# We make a link from libbfd.so to libbfd.so.VERSION for linking, and
# also a link from libTARGET-bfd.so.VERSION for running.
$(SHLINK): $(SHLIB)
	ts=lib`echo $(SHLIB) | sed -e 's/^lib//' | sed -e '$(program_transform_name)'`; \
	if [ "$$ts" != "$(SHLIB)" ]; then \
	  rm -f $$ts; \
	  ln -sf $(SHLIB) $$ts; \
	else true; fi
	rm -f $(SHLINK)
	ln -sf $(SHLIB) $(SHLINK)

# This target creates libTARGET-bfd.so.VERSION as a symlink to
# libbfd.so.VERSION.  It is used on SunOS, which does not have SONAME.
stamp-tshlink: $(SHLIB)
	tf=lib`echo $(SHLIB) | sed -e 's/^lib//' | sed '$(program_transform_name)'`; \
	if [ "$$tf" != "$(SHLIB)" ]; then \
	  rm -f $$tf; \
	  ln -sf $(SHLIB) $$tf; \
	else true; fi
	touch stamp-tshlink

# When compiling archures.c and targets.c, supply the default target
# info from configure.

targets.o: targets.c Makefile
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC) -c $(PICFLAG) $(TDEFAULTS) $(ALL_CFLAGS) $(srcdir)/targets.c -o pic/targets.o; \
	else true; fi
	$(CC) -c $(TDEFAULTS) $(ALL_CFLAGS) $(srcdir)/targets.c

archures.o: archures.c Makefile
	if [ -n "$(PICFLAG)" ]; then \
	  $(CC) -c $(PICFLAG) $(TDEFAULTS) $(ALL_CFLAGS) $(srcdir)/archures.c -o pic/archures.o; \
	else true; fi
	$(CC) -c $(TDEFAULTS) $(ALL_CFLAGS) $(srcdir)/archures.c

elf32-target.h : elfxx-target.h
	rm -f elf32-target.h
	sed -e s/NN/32/g < $(srcdir)/elfxx-target.h > elf32-target.new
	mv -f elf32-target.new elf32-target.h

elf64-target.h : elfxx-target.h
	rm -f elf64-target.h
	sed -e s/NN/64/g < $(srcdir)/elfxx-target.h > elf64-target.new
	mv -f elf64-target.new elf64-target.h

subdir_do: force
	@for i in $(DODIRS); do \
		if [ -d ./$$i ] ; then \
			if (cd ./$$i; \
				$(MAKE) $(FLAGS_TO_PASS) $(DO)) ; then true ; \
			else exit 1 ; fi ; \
		else true ; fi ; \
	done

tags etags: TAGS

TAGS: force
	etags $(INCDIR)/*.h $(srcdir)/*.h $(srcdir)/*.c

do_mostlyclean:
	rm -f *.o *~ core *.E *.p *.ip aout-params.h gen-aout config.log \
		pic/*.o
do_clean: do_mostlyclean
	rm -f libbfd.a TAGS bfd.h stmp-bfd.h ofiles stamp-ofiles \
		elf32-target.h elf64-target.h $(SHLIB) $(SHLINK) \
		piclist stamp-piclist
do_distclean: do_clean
	rm -f Makefile config.status config.cache config.h stamp-h
	rm -rf pic stamp-picdir
do_maintainer_clean: do_distclean
	rm -f $(srcdir)/bfd-in2.h $(srcdir)/libbfd.h $(srcdir)/libcoff.h

mostlyclean: do_mostlyclean
	$(MAKE) subdir_do DO=mostlyclean "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
clean: do_clean
	$(MAKE) subdir_do DO=clean "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
distclean:
	$(MAKE) subdir_do DO=distclean "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
	$(MAKE) do_distclean
clobber maintainer-clean realclean:
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."
	$(MAKE) subdir_do DO=maintainer-clean "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS)
	$(MAKE) do_maintainer_clean

BFD_H_DEPS= $(INCDIR)/ansidecl.h $(INCDIR)/obstack.h
LOCAL_H_DEPS= libbfd.h sysdep.h config.h
$(BFD_LIBS): $(BFD_H) $(BFD_H_DEPS) $(LOCAL_H_DEPS)
$(BFD_MACHINES): $(BFD_H) $(BFD_H_DEPS) $(LOCAL_H_DEPS)
$(BFD_BACKENDS): $(BFD_H) $(BFD_H_DEPS) $(LOCAL_H_DEPS)
$(OPTIONAL_BACKENDS): $(BFD_H) $(BFD_H_DEPS) $(LOCAL_H_DEPS)

# Get around a Sun Make bug in SunOS 4.1.1 with VPATH
cpu-i386.o:cpu-i386.c
cpu-z8k.o: cpu-z8k.c
cpu-h8500.o: cpu-h8500.c
cpu-we32k.o: cpu-we32k.c

saber:
	#suppress 65 on bfd_map_over_sections 
	#suppress 66 on bfd_map_over_sections 
	#suppress 67 on bfd_map_over_sections 
	#suppress 68 on bfd_map_over_sections 
	#suppress 69 on bfd_map_over_sections 
	#suppress 70 on bfd_map_over_sections 
	#suppress 110 in bfd_map_over_sections 
	#suppress 112 in bfd_map_over_sections 
	#suppress 530 
	#suppress 590 in swap_exec_header 
	#suppress 590 in _bfd_dummy_core_file_matches_executable_p 
	#suppress 590 in bfd_dont_truncate_arname
	#suppress 590 on ignore 
	#suppress 590 on abfd 
	#setopt load_flags $(CFLAGS)
	#load $(CFILES)


#-----------------------------------------------------------------------------
#		'STANDARD' GNU/960 TARGETS BELOW THIS POINT
#
# 'VERSION' file must be present and contain a string of the form "x.y"
#-----------------------------------------------------------------------------

ver960.c: FORCE
	rm -f ver960.c
	echo "char ${TARG}_ver[]= \"${TARG} `cat VERSION`, `date`\";" > ver960.c


# This target should be invoked before building a new release.
# 'VERSION' file must be present and contain a string of the form "x.y"
#
roll:
	@V=`cat VERSION`		; \
	MAJ=`sed 's/\..*//' VERSION`	; \
	MIN=`sed 's/.*\.//' VERSION`	; \
	V=$$MAJ.`expr $$MIN + 1`	; \
	rm -f VERSION			; \
	echo $$V >VERSION		; \
	echo Version $$V

# Dummy target to force execution of dependent targets.
#
force:

install: $(ALLLIBS)
	for f in $(ALLLIBS); do \
	  if [ "$$f" = "stamp-tshlink" ]; then \
	    continue; \
	  fi; \
	  tf=lib`echo $$f | sed -e 's/^lib//' | sed '$(program_transform_name)'`; \
	  rm -f $(libdir)/$$tf; \
	  if [ "$$f" = "$(SHLINK)" ]; then \
	    ts=lib`echo $(SHLIB) | sed -e 's/^lib//' | sed '$(program_transform_name)'`; \
	    ln -sf $$ts $(libdir)/$$tf; \
	  elif [ "$$f" = "$(SHLIB)" ]; then \
	    $(INSTALL_PROGRAM) $$f $(libdir)/$$tf; \
	  else \
	    $(INSTALL_DATA) $$f $(libdir)/$$tf; \
	    $(RANLIB) $(libdir)/$$tf; \
	    chmod a-x $(libdir)/$$tf; \
	  fi; \
	done
# Install BFD include file, and others that it needs.  Install them
# both in GCC's include directory, and in the system include dir
# if configured as $(oldincludedir) -- which it usually isnt.
	$(INSTALL_DATA) $(BFD_H) $(includedir)/bfd.h
	$(INSTALL_DATA) $(INCDIR)/ansidecl.h $(includedir)/ansidecl.h
	$(INSTALL_DATA) $(INCDIR)/bfdlink.h $(includedir)/bfdlink.h
	$(INSTALL_DATA) $(INCDIR)/obstack.h $(includedir)/obstack.h
	-if test -z "$(oldincludedir)"; then true; else \
	test -d $(oldincludedir) || mkdir $(oldincludedir); \
	$(INSTALL_DATA) $(BFD_H) $(oldincludedir)/bfd.h; \
	$(INSTALL_DATA) $(INCDIR)/ansidecl.h $(oldincludedir)/ansidecl.h; \
	$(INSTALL_DATA) $(INCDIR)/bfdlink.h $(oldincludedir)/bfdlink.h; \
	$(INSTALL_DATA) $(INCDIR)/obstack.h $(oldincludedir)/obstack.h; \
	$(MAKE) subdir_do DO=install "DODIRS=$(SUBDIRS)" $(FLAGS_TO_PASS); \
	fi

Makefile: Makefile.in config.status
	CONFIG_FILES=Makefile CONFIG_HEADERS= $(SHELL) ./config.status

config.h: stamp-h ; @true
stamp-h: config.in config.status
	CONFIG_FILES= CONFIG_HEADERS=config.h:config.in $(SHELL) ./config.status

config.status: configure configure.host config.bfd VERSION
	$(SHELL) config.status --recheck

# Have to get rid of .dep1 here so that "$?" later includes all of $(CFILES).
.dep: dep.sed $(CFILES) $(HFILES) bfd.h
	rm -f .dep1
	$(MAKE) DEP=$(DEP) .dep1
	sed -f dep.sed <.dep1 >.dep

# This rule really wants a mkdep that runs "gcc -MM".
# The NetBSD mkdep overwrites any existing file contents, and doesn't insert
# the "DO NOT DELETE" line.
# Other mkdep versions require a file that already exists, and do insert it.
# Hence the weirdness....
.dep1: $(CFILES)
	rm -f .dep2 .dep2a
	echo '# DO NOT DELETE THIS LINE -- mkdep uses it.' > .dep2
	echo > .dep2a
	$(DEP) -f .dep2a $(ALL_CFLAGS) $?
	sed -e '/DO NOT DELETE/d' -e '/^$$/d' < .dep2a >> .dep2
	rm -f .dep2a
	$(srcdir)/../move-if-change .dep2 .dep1

dep.sed: dep-in.sed config.status
	sed <$(srcdir)/dep-in.sed >dep.sed	\
		-e 's!@BFD_H@!$(BFD_H)!'	\
		-e 's!@INCDIR@!$(INCDIR)!'	\
		-e 's!@SRCDIR@!$(srcdir)!'

dep: .dep
	sed -e '/^..DO NOT DELETE THIS LINE/,$$d' < Makefile > tmp-Makefile
	cat .dep >> tmp-Makefile
	$(srcdir)/../move-if-change tmp-Makefile Makefile

dep-in: .dep
	sed -e '/^..DO NOT DELETE THIS LINE/,$$d' < $(srcdir)/Makefile.in > tmp-Makefile.in
	cat .dep >> tmp-Makefile.in
	$(srcdir)/../move-if-change tmp-Makefile.in $(srcdir)/Makefile.in

host-aout.o: Makefile

# The following program can be used to generate a simple config file
# which can be folded into an h-XXX file for a new host, with some editing.
aout-params.h: gen-aout
	./gen-aout host > aout-params.h
gen-aout: $(srcdir)/gen-aout.c Makefile
	$(CC) -o gen-aout $(CFLAGS) $(LFLAGS) $(srcdir)/gen-aout.c

BFDIN_H= $(srcdir)/bfd-in2.h

$(BFD_H): stmp-bfd.h ; @true

stmp-bfd.h : $(srcdir)/bfd-in2.h Makefile
	rm -f bfd.h-new
	sed -e 's/@WORDSIZE@/$(WORDSIZE)/' \
	    -e "s/@VERSION@/`cat $(srcdir)/VERSION`/" \
	    -e 's/@BFD_HOST_64BIT_LONG@/@HOST_64BIT_LONG@/' \
		< $(srcdir)/bfd-in2.h \
		> bfd.h-new
	$(srcdir)/../move-if-change bfd.h-new $(BFD_H)
	touch stmp-bfd.h

# Could really use a "copy-if-change"...
headers:
	(cd $(docdir); $(MAKE) protos $(FLAGS_TO_PASS))
	cp $(docdir)/bfd.h bfd-in2.h-new
	$(srcdir)/../move-if-change bfd-in2.h-new $(srcdir)/bfd-in2.h
	cp $(docdir)/libbfd.h libbfd.h-new
	$(srcdir)/../move-if-change libbfd.h-new $(srcdir)/libbfd.h
	cp $(docdir)/libcoff.h libcoff.h-new
	$(srcdir)/../move-if-change libcoff.h-new $(srcdir)/libcoff.h

# The rules for the generated header files are here so that people can
# type `make bfd-in2.h' if they remove it.  They are not run by default.
$(srcdir)/bfd-in2.h:
	(cd $(docdir); $(MAKE) bfd.h $(FLAGS_TO_PASS))
	cp $(docdir)/bfd.h bfd-in2.h-new
	$(srcdir)/../move-if-change bfd-in2.h-new $(srcdir)/bfd-in2.h
$(srcdir)/libbfd.h:
	(cd $(docdir); $(MAKE) libbfd.h $(FLAGS_TO_PASS))
	cp $(docdir)/libbfd.h libbfd.h-new
	$(srcdir)/../move-if-change libbfd.h-new $(srcdir)/libbfd.h
$(srcdir)/libcoff.h:
	(cd $(docdir); $(MAKE) libcoff.h $(FLAGS_TO_PASS))
	cp $(docdir)/libcoff.h libcoff.h-new
	$(srcdir)/../move-if-change libcoff.h-new $(srcdir)/libcoff.h

bfd.info:
	(cd $(docdir); $(MAKE) bfd.info $(FLAGS_TO_PASS))

bfd.dvi:
	(cd $(docdir); $(MAKE) bfd.dvi $(FLAGS_TO_PASS))

bfd.ps: 
	(cd $(docdir); $(MAKE) bfd.ps $(FLAGS_TO_PASS))


$(OFILES): stamp-picdir

stamp-picdir:
	if [ -n "$(PICFLAG)" ] && [ ! -d pic ]; then \
	  mkdir pic; \
	else true; fi
	touch stamp-picdir

# What appears below is generated by a hacked mkdep using gcc -MM.

# DO NOT DELETE THIS LINE -- mkdep uses it.
# DO NOT PUT ANYTHING AFTER THIS LINE, IT WILL GO AWAY.
archive.o: archive.c $(INCDIR)/aout/ar.h $(INCDIR)/aout/ranlib.h
archures.o: archures.c
bfd.o: bfd.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h libcoff.h libecoff.h $(INCDIR)/coff/ecoff.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h
cache.o: cache.c
coffgen.o: coffgen.c $(INCDIR)/coff/internal.h libcoff.h \
  $(INCDIR)/bfdlink.h
corefile.o: corefile.c
format.o: format.c
init.o: init.c
libbfd.o: libbfd.c
opncls.o: opncls.c
reloc.o: reloc.c $(INCDIR)/bfdlink.h
section.o: section.c
syms.o: syms.c $(INCDIR)/bfdlink.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def
targets.o: targets.c
hash.o: hash.c
linker.o: linker.c $(INCDIR)/bfdlink.h genlink.h
elf.o: elf.c $(INCDIR)/bfdlink.h elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
srec.o: srec.c $(INCDIR)/libiberty.h
binary.o: binary.c
tekhex.o: tekhex.c $(INCDIR)/libiberty.h
ihex.o: ihex.c $(INCDIR)/libiberty.h
stabs.o: stabs.c $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def
stab-syms.o: stab-syms.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab.def
cpu-a29k.o: cpu-a29k.c
cpu-alpha.o: cpu-alpha.c
cpu-arm.o: cpu-arm.c
cpu-h8300.o: cpu-h8300.c
cpu-h8500.o: cpu-h8500.c
cpu-hppa.o: cpu-hppa.c
cpu-i386.o: cpu-i386.c
cpu-i860.o: cpu-i860.c
cpu-i960.o: cpu-i960.c
cpu-m68k.o: cpu-m68k.c
cpu-m88k.o: cpu-m88k.c
cpu-mips.o: cpu-mips.c
cpu-ns32k.o: cpu-ns32k.c ns32k.h
cpu-powerpc.o: cpu-powerpc.c
cpu-rs6000.o: cpu-rs6000.c
cpu-sh.o: cpu-sh.c
cpu-sparc.o: cpu-sparc.c
cpu-vax.o: cpu-vax.c
cpu-we32k.o: cpu-we32k.c
cpu-w65.o: cpu-w65.c
cpu-z8k.o: cpu-z8k.c
aout-adobe.o: aout-adobe.c $(INCDIR)/aout/adobe.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def libaout.h $(INCDIR)/bfdlink.h
aout-ns32k.o: aout-ns32k.c $(INCDIR)/aout/aout64.h \
  ns32k.h libaout.h $(INCDIR)/bfdlink.h
aout0.o: aout0.c aoutf1.h $(INCDIR)/aout/sun4.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
aout32.o: aout32.c aoutx.h $(INCDIR)/bfdlink.h libaout.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
bout.o: bout.c $(INCDIR)/bfdlink.h genlink.h $(INCDIR)/bout.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def libaout.h
cf-i386lynx.o: cf-i386lynx.c coff-i386.c $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
cf-m68klynx.o: cf-m68klynx.c coff-m68k.c $(INCDIR)/coff/m68k.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
cf-sparclynx.o: cf-sparclynx.c coff-sparc.c $(INCDIR)/coff/sparc.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-a29k.o: coff-a29k.c $(INCDIR)/coff/a29k.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-apollo.o: coff-apollo.c $(INCDIR)/coff/apollo.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-arm.o: coff-arm.c $(INCDIR)/coff/arm.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-aux.o: coff-aux.c $(INCDIR)/coff/aux-coff.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/m68k.h coff-m68k.c libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-h8300.o: coff-h8300.c $(INCDIR)/bfdlink.h genlink.h \
  $(INCDIR)/coff/h8300.h $(INCDIR)/coff/internal.h libcoff.h \
  coffcode.h coffswap.h
coff-h8500.o: coff-h8500.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/h8500.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-i386.o: coff-i386.c $(INCDIR)/coff/i386.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-i860.o: coff-i860.c $(INCDIR)/coff/i860.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-go32.o: coff-go32.c coff-i386.c $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-i960.o: coff-i960.c $(INCDIR)/coff/i960.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-m68k.o: coff-m68k.c $(INCDIR)/coff/m68k.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-m88k.o: coff-m88k.c $(INCDIR)/coff/m88k.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-mips.o: coff-mips.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/mips.h libcoff.h libecoff.h coffswap.h \
  ecoffswap.h
coff-pmac.o: coff-pmac.c coff-rs6000.c $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/rs6000.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-rs6000.o: coff-rs6000.c $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/rs6000.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-sh.o: coff-sh.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/sh.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-sparc.o: coff-sparc.c $(INCDIR)/coff/sparc.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-u68k.o: coff-u68k.c coff-m68k.c $(INCDIR)/coff/m68k.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h \
  coffcode.h coffswap.h
coff-we32k.o: coff-we32k.c $(INCDIR)/coff/we32k.h $(INCDIR)/coff/internal.h \
  libcoff.h $(INCDIR)/bfdlink.h coffcode.h coffswap.h
coff-w65.o: coff-w65.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/w65.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
coff-z8k.o: coff-z8k.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/z8k.h \
  $(INCDIR)/coff/internal.h libcoff.h coffcode.h coffswap.h
cofflink.o: cofflink.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
  libcoff.h
ecoff.o: ecoff.c $(INCDIR)/bfdlink.h $(INCDIR)/aout/ar.h \
  $(INCDIR)/aout/ranlib.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  libaout.h $(INCDIR)/aout/aout64.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  libcoff.h libecoff.h
ecofflink.o: ecofflink.c $(INCDIR)/bfdlink.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h
elf32-gen.o: elf32-gen.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf32-target.h
elf32-hppa.o: elf32-hppa.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  elf32-hppa.h libhppa.h $(INCDIR)/elf/hppa.h hppa_stubs.h \
  elf32-target.h
elf32-i386.o: elf32-i386.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  elf32-target.h
elf32-i860.o: elf32-i860.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf32-target.h
elf32-m68k.o: elf32-m68k.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  elf32-target.h
elf32-m88k.o: elf32-m88k.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf32-target.h
elf32-mips.o: elf32-mips.c $(INCDIR)/bfdlink.h genlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/mips.h ecoffswap.h \
  elf32-target.h
elf32-ppc.o: elf32-ppc.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/ppc.h elf32-target.h
elf32-sparc.o: elf32-sparc.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  $(INCDIR)/elf/sparc.h elf32-target.h
elf32.o: elf32.c elfcode.h $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  elfcore.h elflink.h
elflink.o: elflink.c $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h
hp300hpux.o: hp300hpux.c $(INCDIR)/aout/hp300hpux.h \
  aoutx.h $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
som.o: som.c
i386aout.o: i386aout.c libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386bsd.o: i386bsd.c libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386freebsd.o: i386freebsd.c freebsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386linux.o: i386linux.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h
i386lynx.o: i386lynx.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h aout-target.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386msdos.o: i386msdos.c libaout.h $(INCDIR)/bfdlink.h
i386netbsd.o: i386netbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
i386mach3.o: i386mach3.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h
i386os9k.o: i386os9k.c $(INCDIR)/bfdlink.h libaout.h \
  $(INCDIR)/os9k.h
ieee.o: ieee.c $(INCDIR)/ieee.h libieee.h
m68klinux.o: m68klinux.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h
m68klynx.o: m68klynx.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h aout-target.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m68knetbsd.o: m68knetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
m88kmach3.o: m88kmach3.c libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
mipsbsd.o: mipsbsd.c libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
newsos3.o: newsos3.c $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h libaout.h \
  $(INCDIR)/bfdlink.h aout-target.h
nlm.o: nlm.c libnlm.h $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h \
  $(INCDIR)/nlm/external.h
nlm32-i386.o: nlm32-i386.c $(INCDIR)/nlm/i386-ext.h \
  libnlm.h $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h \
  $(INCDIR)/nlm/external.h nlmswap.h nlm-target.h
nlm32-sparc.o: nlm32-sparc.c $(INCDIR)/nlm/sparc32-ext.h \
  libnlm.h $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h \
  $(INCDIR)/nlm/external.h nlmswap.h nlm-target.h
nlm32-ppc.o: nlm32-ppc.c $(INCDIR)/nlm/ppc-ext.h libnlm.h \
  $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h \
  nlmswap.h nlm-target.h
nlm32.o: nlm32.c nlmcode.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
ns32knetbsd.o: ns32knetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
oasys.o: oasys.c $(INCDIR)/oasys.h liboasys.h
pc532-mach.o: pc532-mach.c libaout.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/aout/aout64.h aout-target.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
pe-arm.o: pe-arm.c coff-arm.c $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
pei-arm.o: pei-arm.c coff-arm.c $(INCDIR)/coff/arm.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
pe-i386.o: pe-i386.c coff-i386.c $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
pei-i386.o: pei-i386.c coff-i386.c $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
pe-ppc.o: pe-ppc.c coff-ppc.c $(INCDIR)/coff/powerpc.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
pei-ppc.o: pei-ppc.c coff-ppc.c $(INCDIR)/coff/powerpc.h \
  $(INCDIR)/coff/internal.h $(INCDIR)/coff/pe.h libcoff.h \
  $(INCDIR)/bfdlink.h coffcode.h peicode.h
ppcboot.o: ppcboot.c
reloc16.o: reloc16.c $(INCDIR)/bfdlink.h genlink.h \
  $(INCDIR)/coff/internal.h libcoff.h
sparclynx.o: sparclynx.c $(INCDIR)/aout/sun4.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
sparcnetbsd.o: sparcnetbsd.c netbsd.h libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
sunos.o: sunos.c $(INCDIR)/bfdlink.h libaout.h aoutf1.h \
  $(INCDIR)/aout/sun4.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
versados.o: versados.c $(INCDIR)/libiberty.h
xcofflink.o: xcofflink.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
  libcoff.h
aout64.o: aout64.c aoutx.h $(INCDIR)/bfdlink.h libaout.h \
  $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def \
  $(INCDIR)/aout/ar.h
coff-alpha.o: coff-alpha.c $(INCDIR)/bfdlink.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/sym.h $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h \
  $(INCDIR)/coff/alpha.h $(INCDIR)/aout/ar.h libcoff.h \
  libecoff.h coffswap.h ecoffswap.h
demo64.o: demo64.c aoutf1.h $(INCDIR)/aout/sun4.h libaout.h \
  $(INCDIR)/bfdlink.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h aout-target.h
elf64-alpha.o: elf64-alpha.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/alpha.h $(INCDIR)/coff/internal.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h \
  $(INCDIR)/aout/ar.h libcoff.h libecoff.h ecoffswap.h \
  elf64-target.h
elf64-gen.o: elf64-gen.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  elf64-target.h
elf64-mips.o: elf64-mips.c $(INCDIR)/bfdlink.h genlink.h \
  elf-bfd.h $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h \
  $(INCDIR)/elf/external.h $(INCDIR)/elf/mips.h $(INCDIR)/coff/sym.h \
  $(INCDIR)/coff/symconst.h $(INCDIR)/coff/internal.h \
  $(INCDIR)/coff/ecoff.h $(INCDIR)/coff/alpha.h ecoffswap.h \
  elf64-target.h
elf64-sparc.o: elf64-sparc.c elf-bfd.h $(INCDIR)/elf/common.h \
  $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h $(INCDIR)/bfdlink.h \
  $(INCDIR)/elf/sparc.h elf64-target.h
elf64.o: elf64.c elfcode.h $(INCDIR)/bfdlink.h elf-bfd.h \
  $(INCDIR)/elf/common.h $(INCDIR)/elf/internal.h $(INCDIR)/elf/external.h \
  elfcore.h elflink.h
evax-alpha.o: evax-alpha.c $(INCDIR)/bfdlink.h evax.h
evax-egsd.o: evax-egsd.c $(INCDIR)/bfdlink.h evax.h
evax-etir.o: evax-etir.c $(INCDIR)/bfdlink.h evax.h
evax-emh.o: evax-emh.c $(INCDIR)/bfdlink.h evax.h
evax-misc.o: evax-misc.c $(INCDIR)/bfdlink.h evax.h
nlm32-alpha.o: nlm32-alpha.c $(INCDIR)/nlm/alpha-ext.h \
  libnlm.h $(INCDIR)/nlm/common.h $(INCDIR)/nlm/internal.h \
  $(INCDIR)/nlm/external.h nlmswap.h nlm-target.h
nlm64.o: nlm64.c nlmcode.h libnlm.h $(INCDIR)/nlm/common.h \
  $(INCDIR)/nlm/internal.h $(INCDIR)/nlm/external.h
aix386-core.o: aix386-core.c $(INCDIR)/coff/i386.h \
  $(INCDIR)/coff/internal.h libcoff.h $(INCDIR)/bfdlink.h
hpux-core.o: hpux-core.c
irix-core.o: irix-core.c
lynx-core.o: lynx-core.c
osf-core.o: osf-core.c
trad-core.o: trad-core.c libaout.h $(INCDIR)/bfdlink.h
cisco-core.o: cisco-core.c
i386dynix.o: i386dynix.c $(INCDIR)/aout/dynix3.h aoutx.h \
  $(INCDIR)/bfdlink.h libaout.h $(INCDIR)/aout/aout64.h \
  $(INCDIR)/aout/stab_gnu.h $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h \
  aout-target.h
hp300bsd.o: hp300bsd.c libaout.h $(INCDIR)/bfdlink.h \
  aout-target.h $(INCDIR)/aout/aout64.h $(INCDIR)/aout/stab_gnu.h \
  $(INCDIR)/aout/stab.def $(INCDIR)/aout/ar.h
# IF YOU PUT ANYTHING HERE IT WILL GO AWAY
